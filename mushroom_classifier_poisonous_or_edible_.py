# -*- coding: utf-8 -*-
"""Mushroom Classifier: Poisonous or Edible?

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rk7VEUPJ4ji9BA8lsdWHPzH5oFuMtcad

Mushroom Classification: Poisonous or Edible? ([Kaggle](https://www.kaggle.com/uciml/mushroom-classification))
"""

import pandas as pd
import tensorflow as tf
import tensorflow.keras as keras
from keras import Sequential
from keras.layers import Dense, Flatten

# Map the characters in the datasets to numbers that will be used
attributes = {
    'class': ('p', 'e'),
    'cap-shape': ('b', 'c', 'x', 'f', 'k', 's'),
    'cap-surface': ('f', 'g', 'y', 's'),
    'cap-color': ('n', 'b', 'c', 'g', 'r', 'p', 'u', 'e', 'w', 'y'),
    'bruises': ('f', 't'),
    'odor': ('a', 'l', 'c', 'y', 'f', 'm', 'n', 'p', 's'),
    'gill-attachment': ('a', 'd', 'f', 'n'),
    'gill-spacing': ('c', 'w', 'd'),
    'gill-size': ('b', 'n'),
    'gill-color': ('k', 'n', 'b', 'h', 'g', 'r', 'o', 'p', 'u', 'e', 'w', 'y'),
    'stalk-shape': ('e', 't'),
    'stalk-root': ('b', 'c', 'u', 'e', 'z','r', '?'),
    'stalk-surface-above-ring': ('f', 'y', 'k', 's'),
    'stalk-surface-below-ring': ('f', 'y', 'k', 's'),
    'stalk-color-above-ring': ('n', 'b', 'c', 'g', 'o', 'p', 'e', 'w', 'y'),
    'stalk-color-below-ring': ('n', 'b', 'c', 'g', 'o', 'p', 'e', 'w', 'y'),
    'veil-type': ('p', 'u'),
    'veil-color': ('n', 'o', 'w', 'y'),
    'ring-number': ('n', 'o', 't'),
    'ring-type': ('c', 'e', 'f', 'l', 'n', 'p', 's', 'z'),
    'spore-print-color': ('k', 'n', 'b', 'h', 'r', 'o', 'u', 'w', 'y'),
    'population': ('a', 'c', 'n', 's', 'v', 'y'),
    'habitat': ('g', 'l', 'm', 'p', 'u', 'w', 'd')
}

#>>> Data preprocessing

TRAINING_DATA = 6000

# Load data
data = pd.read_csv("drive/My Drive/AI Club/Datasets/mushrooms.csv") # 8124 rows x 23 columns

# Replace characters in data with numbers
for column, chars in attributes.items():
    replacement = {}
    for i, char in enumerate(chars):
        replacement[char] = i
    data = data.replace({column: replacement})

# Separate data into features (x) and class (y)
x = data.loc[:, 'cap-shape':'habitat'].values # 22 columns
y = data.loc[:, 'class'].values # 1 column

# Separate data into training and testing data
x_train = x[:TRAINING_DATA]
y_train = y[:TRAINING_DATA]

x_test = x[TRAINING_DATA:]
y_test = y[TRAINING_DATA:]

print(x_test)
print(y_test)

#>>> Model creation

# Initialize layers
model = Sequential()
model.add(Dense(16, activation='relu', input_shape=(22,)))
model.add(Dense(32, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(1, activation='relu'))

# Compile the model
model.compile(
    optimizer='adam',
    loss='mean_squared_error',
    metrics=['accuracy']
)

#>>> Training

# Fit the model
model.fit(x_train, y_train, epochs=5)

# Evalaute the model
print("    Testing:")
loss, accuracy = model.evaluate(x_test, y_test)
print("Loss:", loss)
print("Accuracy:", accuracy)

def make_prediction(x):
    prediction = model.predict(x)
    print("There is a " + str(int(prediction * 100)) + "% chance that this mushroom is poisonous!")

make_prediction(x[0:1])